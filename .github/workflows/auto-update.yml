name: Auto Update Dependencies

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for outdated packages
        id: outdated
        run: |
          # Check if there are outdated packages
          if npm outdated --json > outdated.json 2>/dev/null; then
            if [ -s outdated.json ]; then
              echo "HAS_UPDATES=true" >> $GITHUB_OUTPUT
              echo "ðŸ“¦ Found outdated packages"
              cat outdated.json
            else
              echo "HAS_UPDATES=false" >> $GITHUB_OUTPUT
              echo "âœ… All packages are up to date"
            fi
          else
            echo "HAS_UPDATES=false" >> $GITHUB_OUTPUT
            echo "âœ… All packages are up to date"
          fi
          
      - name: Update dependencies
        if: steps.outdated.outputs.HAS_UPDATES == 'true'
        run: |
          # Backup current package.json
          cp package.json package.json.backup
          
          # Update dependencies (excluding major version updates for safety)
          npx npm-check-updates -u --target minor
          
          # Install updated dependencies
          npm install
          
          # Run tests to ensure everything still works
          npm test
          
      - name: Generate update summary
        if: steps.outdated.outputs.HAS_UPDATES == 'true'
        id: summary
        run: |
          # Compare package.json files to see what changed
          echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "## Dependency Updates" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Get differences
          if command -v jq &> /dev/null; then
            echo "### Updated Packages:" >> $GITHUB_OUTPUT
            diff <(jq -S '.dependencies // {}' package.json.backup) <(jq -S '.dependencies // {}' package.json) | grep '^>' | sed 's/^> /- /' >> $GITHUB_OUTPUT || true
            echo "" >> $GITHUB_OUTPUT
            echo "### Updated Dev Dependencies:" >> $GITHUB_OUTPUT
            diff <(jq -S '.devDependencies // {}' package.json.backup) <(jq -S '.devDependencies // {}' package.json) | grep '^>' | sed 's/^> /- /' >> $GITHUB_OUTPUT || true
          else
            echo "- Updated minor and patch versions of outdated packages" >> $GITHUB_OUTPUT
            echo "- All tests passing after updates" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> $GITHUB_OUTPUT
          echo "### Test Results:" >> $GITHUB_OUTPUT
          echo "âœ… All tests passed after dependency updates" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request
        if: steps.outdated.outputs.HAS_UPDATES == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies to latest minor/patch versions'
          title: 'ðŸ”„ Auto-update dependencies'
          body: |
            ${{ steps.summary.outputs.CHANGES }}
            
            ---
            
            This is an automated pull request to update dependencies to their latest minor and patch versions.
            
            **What's included:**
            - Minor and patch version updates only (no major version changes)
            - All tests have passed with the new dependencies
            - No breaking changes expected
            
            **Review checklist:**
            - [ ] Check that all tests are passing
            - [ ] Verify examples still work correctly
            - [ ] Review any security advisories for updated packages
            
            **Auto-generated by:** Dependency Update Workflow
          branch: auto-update-dependencies
          branch-suffix: timestamp
          delete-branch: true
          
      - name: Cleanup
        if: always()
        run: |
          rm -f outdated.json package.json.backup
