# Comprehensive NPM Publishing Workflow
# This workflow handles the complete release cycle from testing to publishing

name: üöÄ Publish to NPM

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        default: ''
      dry_run:
        description: 'Dry run (test without publishing)'
        type: boolean
        default: false

env:
  NODE_VERSION: '20.x'
  PACKAGE_NAME: 'bhram-muhurat'

jobs:
  # Security and quality checks
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check for vulnerabilities
        run: |
          echo "üîç Checking for security vulnerabilities..."
          
          # Run audit and capture results
          AUDIT_RESULT=$(npm audit --json 2>/dev/null || echo '{"vulnerabilities":{}}')
          
          # Check for high/critical vulnerabilities
          VULN_COUNT=$(echo "$AUDIT_RESULT" | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
          
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "‚ùå Found $VULN_COUNT security vulnerabilities"
            echo "üîç Running detailed audit..."
            npm audit --audit-level moderate
            echo ""
            echo "üö® Security vulnerabilities must be fixed before publishing"
            echo "Run 'npm audit fix' to resolve issues"
            exit 1
          else
            echo "‚úÖ No security vulnerabilities found"
          fi

  # Complete test matrix
  test:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x, 22.x]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            node-version: 16.x
          - os: macos-latest
            node-version: 16.x
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: Validate package compatibility
        run: npm run validate-deps
        
      - name: Test package installation
        run: |
          # Test if package can be imported correctly
          node -e "
            const calc = require('./src/index.js');
            console.log('‚úÖ Package imports successfully');
            if (typeof calc.calculate !== 'function') {
              throw new Error('Main API method not found');
            }
            console.log('‚úÖ Main API method available');
          "

  # Build and package verification
  build:
    name: üî® Build & Package
    needs: [security, test]
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.version.outputs.version }}
      tag-version: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          echo "Tag: ${TAG}"
          
      - name: Verify version consistency
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          
          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch!"
            echo "Package.json: $PACKAGE_VERSION"
            echo "Expected: $EXPECTED_VERSION"
            echo "Please update package.json version before creating the tag"
            exit 1
          fi
          echo "‚úÖ Version verification passed: $PACKAGE_VERSION"
          
      - name: Build package
        run: npm run build
        
      - name: Create package tarball
        run: |
          npm pack
          ls -la *.tgz
          
      - name: Verify package contents
        run: |
          TARBALL=$(ls *.tgz)
          echo "üì¶ Package contents:"
          tar -tzf "$TARBALL" | head -20
          
          # Verify essential files are included
          if ! tar -tzf "$TARBALL" | grep -q "package/src/index.js"; then
            echo "‚ùå Main file missing from package"
            exit 1
          fi
          
          if ! tar -tzf "$TARBALL" | grep -q "package/package.json"; then
            echo "‚ùå package.json missing from package"
            exit 1
          fi
          
          echo "‚úÖ Package verification passed"

  # Generate release notes
  release:
    name: üìù Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog
          
      - name: Generate detailed changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.build.outputs.tag-version }}"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Get commits since last tag
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          # Create comprehensive changelog
          CHANGELOG="## üéâ What's New in $CURRENT_TAG
          
          ### üìã Changes
          $COMMITS
          
          ### üîß Technical Details
          - **Node.js Support**: 16.x, 18.x, 20.x, 22.x
          - **Platforms**: Linux, Windows, macOS  
          - **Package Size**: $(du -h *.tgz 2>/dev/null | cut -f1 || echo 'N/A')
          
          ### üì¶ Installation
          \`\`\`bash
          npm install ${{ env.PACKAGE_NAME }}@${{ needs.build.outputs.package-version }}
          \`\`\`
          
          ### üîó Links
          - **NPM Package**: https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}
          - **Documentation**: https://github.com/rakshitbharat/bhram-muhurat#readme
          - **Issues**: https://github.com/rakshitbharat/bhram-muhurat/issues"
          
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG="$CHANGELOG
          - **Full Changelog**: https://github.com/rakshitbharat/bhram-muhurat/compare/$PREVIOUS_TAG...$CURRENT_TAG"
          fi
          
          # Save to file and output
          echo "$CHANGELOG" > RELEASE_NOTES.md
          echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag-version }}
          name: 'üöÄ Release ${{ needs.build.outputs.tag-version }}'
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            *.tgz
            RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # NPM Publishing with comprehensive checks
  publish:
    name: üì¶ Publish to NPM
    needs: [build, release]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          
      - name: Verify NPM token
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚ùå NPM_TOKEN secret is not set"
            echo "Please add your NPM automation token to GitHub Secrets"
            echo "üìã Setup instructions:"
            echo "1. Go to https://www.npmjs.com/settings/tokens"
            echo "2. Generate a new 'Automation' token"
            echo "3. Add it to GitHub Secrets as NPM_TOKEN"
            exit 1
          fi
          
          # Test NPM authentication
          if npm whoami 2>/dev/null; then
            echo "‚úÖ NPM token is configured and valid"
          else
            echo "‚ùå NPM token is invalid or has insufficient permissions"
            echo "Please regenerate your NPM token and update the secret"
            exit 1
          fi
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Final test run
        run: npm test
        
      - name: Check if version already published
        id: check_published
        run: |
          PACKAGE_VERSION="${{ needs.build.outputs.package-version }}"
          
          if npm view ${{ env.PACKAGE_NAME }}@$PACKAGE_VERSION version 2>/dev/null; then
            echo "ALREADY_PUBLISHED=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Version $PACKAGE_VERSION is already published to NPM"
          else
            echo "ALREADY_PUBLISHED=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Version $PACKAGE_VERSION is ready to be published"
          fi
          
      - name: Dry run publish
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üß™ Performing dry run..."
          npm publish --dry-run --access public
          echo "‚úÖ Dry run completed successfully"
          
      - name: Publish to NPM
        if: steps.check_published.outputs.ALREADY_PUBLISHED == 'false' && github.event.inputs.dry_run != 'true'
        run: |
          echo "üì¶ Publishing to NPM..."
          
          # Publish with proper error handling
          if npm publish --access public; then
            echo "‚úÖ Package published successfully!"
            echo "üéâ Published ${{ env.PACKAGE_NAME }}@${{ needs.build.outputs.package-version }} to NPM"
          else
            echo "‚ùå Failed to publish package"
            echo "Please check the error above and try again"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify publication
        if: steps.check_published.outputs.ALREADY_PUBLISHED == 'false' && github.event.inputs.dry_run != 'true'
        run: |
          PACKAGE_VERSION="${{ needs.build.outputs.package-version }}"
          
          echo "‚è≥ Waiting for NPM registry to update..."
          sleep 30
          
          # Retry mechanism for verification with better error handling
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if npm view ${{ env.PACKAGE_NAME }}@$PACKAGE_VERSION version; then
              echo "‚úÖ Package successfully published and verified!"
              echo ""
              echo "üéâ Success! Your package is now available:"
              echo "üì¶ NPM: https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
              echo "üíø Install: npm install ${{ env.PACKAGE_NAME }}@$PACKAGE_VERSION"
              echo "üîó GitHub: https://github.com/rakshitbharat/bhram-muhurat"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚è≥ Attempt $RETRY_COUNT/$MAX_RETRIES: Package not yet visible, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          echo "‚ùå Failed to verify package publication after $MAX_RETRIES attempts"
          echo "The package may have been published but is not yet visible in the registry"
          echo "Please check manually: https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
          exit 1
              echo "üì¶ Install: npm install ${{ env.PACKAGE_NAME }}@$PACKAGE_VERSION"
              echo "üåê NPM: https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
              echo "üìö Docs: https://github.com/rakshitbharat/bhram-muhurat#readme"
              exit 0
            else
              echo "‚è≥ Attempt $i/5: Package not yet available, waiting..."
              sleep 15
            fi
          done
          
          echo "‚ùå Failed to verify package publication after 5 attempts"
          echo "The package may still be processing. Check NPM directly:"
          echo "https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
          exit 1
          
      - name: Post-publish summary
        if: always()
        run: |
          echo "## üìä Publish Summary"
          echo "- **Package**: ${{ env.PACKAGE_NAME }}"
          echo "- **Version**: ${{ needs.build.outputs.package-version }}"
          echo "- **Tag**: ${{ needs.build.outputs.tag-version }}"
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}"
          echo "- **Already Published**: ${{ steps.check_published.outputs.ALREADY_PUBLISHED || 'false' }}"
          
          if [ "${{ steps.check_published.outputs.ALREADY_PUBLISHED }}" == "false" ] && [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "- **Status**: ‚úÖ Successfully published"
          elif [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "- **Status**: üß™ Dry run completed"
          else
            echo "- **Status**: ‚ö†Ô∏è Already published"
          fi

  # Notify on completion
  notify:
    name: üì¢ Notify Completion
    needs: [publish]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Success notification
        if: needs.publish.result == 'success'
        run: |
          echo "üéâ RELEASE COMPLETED SUCCESSFULLY!"
          echo ""
          echo "‚úÖ All checks passed"
          echo "‚úÖ Package published to NPM"
          echo "‚úÖ GitHub release created"
          echo ""
          echo "üì¶ Package: https://www.npmjs.com/package/${{ env.PACKAGE_NAME }}"
          echo "üöÄ Release: https://github.com/rakshitbharat/bhram-muhurat/releases"
          
      - name: Failure notification
        if: needs.publish.result == 'failure'
        run: |
          echo "‚ùå RELEASE FAILED!"
          echo ""
          echo "Please check the workflow logs for details:"
          echo "https://github.com/rakshitbharat/bhram-muhurat/actions"
          exit 1
